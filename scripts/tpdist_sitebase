#!/bin/bash

Linux=`uname -a |awk '{print $3}'| cut -d. -f1,2`

#default_remote_host=LAPTOP-4DDGKLFF.fios-router.home
#default_remote_port=5555
#default_remote_base=/cygdrive/c/users/william/sitebase
#default_remote_dirs="github lib/perl"
default_remote_host=linux1.fios-router.home
default_remote_port=5555
default_remote_base=/home/tian/sitebase
default_remote_dirs="github lib/perl"


remote_host=$default_remote_host
remote_port=$default_remote_port
remote_base=$default_remote_base
remote_dirs=$default_remote_dirs

prog=`basename $0`

usage () {
   cat <<EOF

usage:

   $prog check
   $prog sync

   copy remote sitebase to local

   -s remote_server:remote_host         default $default_remote_host:$default_remote_port

   -b remote_base                       default $default_remote_base

   -d remote_dirs                       default $default_remote_dirs
                                        because other folders are huge

   -a app_env                           support app_env: cygwin

   -v                                   verbose

examples:

   - from cygwin host
   mkdir ~/testbase
   cd ~/testbase
   $prog check .
   

EOF
   exit 1
}

while getopts s:b:d:a:v o;
do
   case "$o" in
      s) remote_host=`echo $OPTARG|cut -d: -f1`
         remote_port=`echo $OPTARG|cut -d: -f2`
         ;;
      a) app=$OPTARG;;
      b) remote_base=$OPTARG;;
      d) remote_dirs=$OPTARG;;
      v) set -x;;
      *) echo "unknown switch='$o'"; usage;;
   esac
done

shift $((OPTIND-1))

if [ $# -ne 2 ]; then
   echo "wrong number of args"
   usage
fi

action=$1
local_base=$2

if [ $action = check ]; then
   flag='-n'
elif [ $action = sync ]; then
   flag=''
else
   echo "ERROR: unknown action='$action'"
   usage
fi

localhost=`hostname|cut -d. -f1`

if [[ $remote_host =~ $localhost ]]; then
   echo "ERROR: remote_host and localhost are the same ($remote_host). please use rsync instead"
   usage
fi

parent_base=`dirname $local_base`
cd $parent_base || exit 1
real_parent_base=`pwd -P`
cd -

real_local_base=$real_parent_base/`basename $local_base`
echo "INFO: $local_base is resolved to: $real_local_base"

me=`id |cut -d\( -f2|cut -d\) -f1`

if [ -e "$real_local_base" ]; then
   owner=`/bin/ls -lLd $real_local_base|awk '{print $3}'`
   echo "INFO: real_local_base $real_local_base owner=$owner"
   target="$real_local_base"
else
   owner=`/bin/ls -lLd $real_parent_base|awk '{print $3}'`
   echo ":INFO: real_parent_base $real_parent_base owner=$owner"
   target=$real_parent_base
fi

if [ $owner != $me ]; then
   echo "ERROR: target $target is owned by $owner, not you ($me)"
   exit 1
fi

not_sure=N
if [ "X$SITEBASE" = "X" ]; then
   echo "SITEBASE is not defined in env"
   not_sure=Y
else
   real_sitebase=$(cd $SITEBASE && pwd -P)
   [ $? -eq 0 ] || exit 1
   if [ $real_sitebase  != $real_local_base -a $real_sitebase/. != $real_local_base ]; then
      echo "SITEBASE ($SITEBASE) != local_base ($real_local_base)"
      not_sure=Y
   fi
fi

if [ $not_sure = Y ]; then
   echo "do you really want to $action into $real_local_base, Yes|No, default N ?"
   read answer

   if [[ $answer =~ ^[Yy]es ]]; then
      echo "answer='$answer', go ahead"
   else
      echo "answer='$answer', is not yes or Yes, quit"
      exit 0
   fi
fi

if [ "X$app" != "X" ]; then
   if [ "X$app" = "Xcygwin" ]; then
      remote_dirs="github lib/perl"
   else 
      echo "ERROR: unknown app env='$app'"
      usage
   fi
fi

for sub_dir in `echo $remote_dirs`
do
   sub_base=`dirname $sub_dir`
   (set -x; 
    tpdist -q -timeout 3600 client $remote_host $remote_port $flag \
       --exclude '[.]git/|[.]swp|[.]nfs|[.]idea|[.]github|__pycache__' \
       "$remote_base/$sub_dir" "$local_base/$sub_base"
   )
done


